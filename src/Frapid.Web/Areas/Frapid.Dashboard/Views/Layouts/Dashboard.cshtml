@model dynamic
@using Frapid.ApplicationState.Cache
@using Frapid.i18n
@using Newtonsoft.Json
<!DOCTYPE html>
<html data-ng-app="FrapidApp">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <meta name="description" content="Frapid Framework" />
    <title data-ng-bind="$root.title">@ViewBag.Title</title>
    <link href="~/Scripts/semantic-ui/semantic.min.css" rel="stylesheet" />
    <script src="~/i18n/resources.js"></script>
    <script src="~/bundles/backend.js"></script>
    <script src="~/Scripts/frapid/utitlities/validator.js"></script>
    <script src="/Scripts/angular-route.min.js"></script>
    <style>        
        #PhoneMenu a {
            display: block !important;
            text-align: center !important;
            padding: 8px 0;
            font-weight: bold;
            color: #76797A;
        }

        #PhoneMenu a {
            font-size: 12px;
        }

            #PhoneMenu a span {
                display: block;
                margin: 12px !important;
            }

            #PhoneMenu a:hover, #PhoneMenu a:active, #PhoneMenu a:focus {
                color: #0556B3;
                box-shadow: inset 0 0 100px 100px rgba(255, 255, 255, 0.3);
                outline: none;
            }

        .large.icon {
            font-size: 34px !important;
            text-align: center !important;
        }

        .ui.link span.text {
            padding: 8px 0 !important;
            display: block !important;
            text-align: center !important;
        }

        #Search input {
            text-align: center;
        }

            #Search input:focus {
                min-width: 30vw;
            }

        .hidden, .initially.hidden {
            display: none;
        }

        html, body, div, p, table, td, th {
            font-size: 12px;
        }

        label, .ui.toggle.checkbox label {
            cursor: pointer;
        }
        
        .dashboard.menu {
            height:32px;
        }
        
        input[readonly], input[disabled], textarea[readonly], textarea[disabled], select[readonly], select[disabled] {
            background-color: #f0f0f0 !important;
            cursor: not-allowed;
        }
        
    #editor {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }


    [data-ng-view], [ng-view] {
        height: 100%;
    }

    .vpad8 {
        padding: 8px 0;
    }

    .error {
        color: brown;
    }        
    </style>
</head>
<body>
    <div class="ui attached basic small inverted violet stackable dashboard menu">
        <a class="item" data-ng-click="toogleDashboard();">
            <i class="mini pin icon"></i>
        </a>
        <div class="ui container" data-scope="app-menus">
        </div>
        <div class="right stackable menu">
            <a class="item" href="/" target="_blank" title="Go to Website">
                <i class="mini world icon"></i>
            </a>
            <a class="item">
                <i class="mini mail icon"></i>
            </a>
            <a class="item" href="/account/sign-out" target="_self">
                <i class="mini log out icon"></i>
            </a>
        </div>
    </div>
    <div id="dashboard-container" class="ui basic attached segment" style="background-color: #E8E8E8; height: 100%;">
        <script>        
        $.getJSON("/dashboard/meta", function (response) {
            window.meta = response;
            window.culture = meta.Culture;
            window.language = meta.Language;
            window.jqueryUIi18nPath = meta.JqueryUIi18NPath;
            window.today = meta.Today;
            window.now = meta.Now;
            window.date = today;
            window.userId = meta.UserId;
            window.user = meta.User;
            window.office = meta.Office;
            window.metaView = meta.MetaView;
            window.shortDateFormat = meta.ShortDateFormat;
            window.longDateFormat = meta.LongDateFormat;
            window.thousandSeparator = meta.ThousandSeparator;
            window.decimalSeparator = meta.DecimalSeparator;
            window.currencyDecimalPlaces = meta.CurrencyDecimalPlaces;
            window.currencySymbol = meta.CurrencySymbol;
            window.datepickerFormat = window.convertNetDateFormat(meta.DatepickerFormat);
            window.datepickerShowWeekNumber = meta.DatepickerShowWeekNumber;
            window.datepickerWeekStartDay = meta.DatepickerWeekStartDay;
            window.datepickerNumberOfMonths = meta.DatepickerNumberOfMonths;
        });

        </script>
        <script>
            var viewPath = "@ViewBag.ViewPath";
            var lastPage;
            var frapidApp = angular.module('FrapidApp', ['ngRoute']);



            frapidApp.config(function ($routeProvider, $locationProvider, $httpProvider) {            
                $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';

                $locationProvider.html5Mode({
                    enabled: true,
                    requireBase: false
                });


                $routeProvider.
                    when('/dashboard', {
                        templateUrl: "/dashboard/apps"
                    }).
                    when('/dashboard/:url*', {
                        templateUrl: function (url) {
                            var path = '/dashboard/' + url.url;


                            var qs = [];

                            for (var q in url) {
                                if (url.hasOwnProperty(q)) {
                                    if (q === "url") {
                                        continue;;
                                    };

                                    if (url.hasOwnProperty(q)) {
                                        qs.push(q + "=" + url[q]);
                                    };
                                }
                            };

                            if (qs.length) {
                                path = path + "?" + qs.join("&");
                            };

                            return path;
                        }
                    });
            });
            
            frapidApp.run(function ($rootScope, $location) {
                $rootScope.$on('$locationChangeStart', function (e, n, o) {
                    window.overridePath = null;
                });

                $rootScope.$on('$routeChangeStart', function () {
                    $("#dashboard-container").addClass("loading");
                });
                
                $rootScope.$on('$routeChangeSuccess', function () {
                    $("#dashboard-container").removeClass("loading");
                    buildMenus();
                });

                $rootScope.toogleDashboard = function () {
                    if (window.location.pathname !== "/dashboard") {
                        lastPage = window.location.pathname;
                        $location.path("/dashboard");
                    } else {
                        if (lastPage) {
                            $location.path(lastPage);
                        };
                    };

                };
            });
        </script>
        <script>
        var menuBuilder = {
            build: function (app, container, menuId) {
                var myMenus = window.Enumerable.From(window.appMenus)
                    .Where(function (x) { return x.AppName === app; })
                    .Where(function (x) { return x.ParentMenuId === menuId; })
                    .OrderBy(function (x) { return x.Sort; })
                    .ToArray();

                var isSubMenu = menuId != null && myMenus.length > 0;

                if (isSubMenu) {
                    if (container.hasClass("item")) {
                        container.addClass("ui dropdown");
                        container.append('<i class="dropdown icon"></i>');
                        container.append("<div class='sub menu' />");
                    };
                };

                $.each(myMenus, function () {
                    var anchor = $("<a />");
                    var span = $("<span/>");
                    anchor.addClass("item");
                    anchor.attr("data-menu-id", this.MenuId);
                    anchor.attr("data-app-name", this.AppName);
                    anchor.attr("data-parent-menu-id", this.ParentMenuId);
                    anchor.attr("href", this.Url || "javascript:void(0);");

                    span.html(this.MenuName);

                    if (this.Icon) {
                        var i = $("<i/>");
                        i.addClass(this.Icon);
                        i.addClass("icon");

                        anchor.append(i);
                    };

                    anchor.append(span);

                    if (isSubMenu) {
                        container.find(".sub.menu").append(anchor);
                    } else {
                        container.append(anchor);
                    };


                    window.menuBuilder.build(app, anchor, this.MenuId);
                });
            }
        };
        </script>
        <script>
            function buildMenus(){
                setTimeout(function(){
                    var target = $('[data-scope="app-menus"]').html("");
                    var path = window.overridePath || window.location.pathname;
                    if (window.menuBuilder) {
                        var application = window.Enumerable.From(window.appMenus)
                            .Where(function(x) { return x.Url === path; })
                            .FirstOrDefault();

                        if (application) {
                            window.menuBuilder.build(application.AppName, target, null);
                            $(".dropdown").dropdown();
                        };
                    };
                    
                    target.fadeIn(200);
                }, 500);
            };
            
            (function () {                
                function loadMenus() {
                    function request() {
                        var url = "/api/config/menu/all";
                        return window.getAjaxRequest(url);
                    };

                    var ajax = request();

                    ajax.success(function (response) {
                        window.appMenus = response;
                        buildMenus();
                    });
                };

                loadMenus();
            })();
            
            
            function initalizeSelectApis() {
                var candidates = $("select[data-api]");

                candidates.each(function () {
                    var el = $(this);
                    var apiUrl = el.attr("data-api");
                    var valueField = el.attr("data-api-value-field");
                    var keyField = el.attr("data-api-key-field");

                    window.ajaxDataBind(apiUrl, el, null, null, null, function () {
                        var selectedValue = el.attr("data-api-selected-value");
                        var selectedValues = el.attr("data-api-selected-values");

                        if (selectedValue) {
                            setTimeout(function () {
                                el.dropdown("set selected", selectedValue.toString());
                            }, 100);
                        };

                        if (selectedValues) {
                            setTimeout(function () {
                                var values = selectedValues.split(",");
                                el.dropdown("set selected", values);
                            }, 100);
                        };


                    }, keyField, valueField);
                });
            };           
        </script>
        <div data-ng-view>
            @RenderBody()
        </div>
    </div>
</body>
</html>
